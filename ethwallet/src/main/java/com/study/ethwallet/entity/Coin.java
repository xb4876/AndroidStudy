package com.study.ethwallet.entity;

import org.greenrobot.greendao.annotation.*;

import com.study.ethwallet.db.CoinDao;
import com.study.ethwallet.db.DaoSession;
import com.study.ethwallet.db.ETHWalletDao;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "COIN".
 */
@Entity(active = true)
public class Coin {

    @Id
    private Long coinId;

    @NotNull
    private String name;
    private String simpleName;
    private String symbol;

    @NotNull
    private String address;
    private String privateKey;
    private String publicKey;
    private Long walletId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CoinDao myDao;

    @ToOne(joinProperty = "walletId")
    private ETHWallet eTHWallet;

    @Generated
    private transient Long eTHWallet__resolvedKey;

    @Generated
    public Coin() {
    }

    public Coin(Long coinId) {
        this.coinId = coinId;
    }

    @Generated
    public Coin(Long coinId, String name, String simpleName, String symbol, String address, String privateKey, String publicKey, Long walletId) {
        this.coinId = coinId;
        this.name = name;
        this.simpleName = simpleName;
        this.symbol = symbol;
        this.address = address;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
        this.walletId = walletId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCoinDao() : null;
    }

    public Long getCoinId() {
        return coinId;
    }

    public void setCoinId(Long coinId) {
        this.coinId = coinId;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    public String getSimpleName() {
        return simpleName;
    }

    public void setSimpleName(String simpleName) {
        this.simpleName = simpleName;
    }

    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    @NotNull
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(@NotNull String address) {
        this.address = address;
    }

    public String getPrivateKey() {
        return privateKey;
    }

    public void setPrivateKey(String privateKey) {
        this.privateKey = privateKey;
    }

    public String getPublicKey() {
        return publicKey;
    }

    public void setPublicKey(String publicKey) {
        this.publicKey = publicKey;
    }

    public Long getWalletId() {
        return walletId;
    }

    public void setWalletId(Long walletId) {
        this.walletId = walletId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ETHWallet getETHWallet() {
        Long __key = this.walletId;
        if (eTHWallet__resolvedKey == null || !eTHWallet__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ETHWalletDao targetDao = daoSession.getETHWalletDao();
            ETHWallet eTHWalletNew = targetDao.load(__key);
            synchronized (this) {
                eTHWallet = eTHWalletNew;
            	eTHWallet__resolvedKey = __key;
            }
        }
        return eTHWallet;
    }

    @Generated
    public void setETHWallet(ETHWallet eTHWallet) {
        synchronized (this) {
            this.eTHWallet = eTHWallet;
            walletId = eTHWallet == null ? null : eTHWallet.getCoinId();
            eTHWallet__resolvedKey = walletId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
