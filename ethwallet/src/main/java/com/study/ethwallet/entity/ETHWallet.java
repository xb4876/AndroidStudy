package com.study.ethwallet.entity;

import org.greenrobot.greendao.annotation.*;

import java.util.List;

import com.study.ethwallet.db.CoinDao;
import com.study.ethwallet.db.DaoSession;
import com.study.ethwallet.db.ETHWalletDao;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ETHWallet".
 */
@Entity(active = true, nameInDb = "ETHWallet")
public class ETHWallet {

    @Id
    private Long coinId;

    @NotNull
    private String name;

    @NotNull
    private String password;
    private String keystorePath;
    private String mnemonic;
    private Boolean isCurrent;
    private Boolean isBackup;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ETHWalletDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "coinId", referencedName = "walletId")
    })
    private List<Coin> coins;

    @Generated
    public ETHWallet() {
    }

    public ETHWallet(Long coinId) {
        this.coinId = coinId;
    }

    @Generated
    public ETHWallet(Long coinId, String name, String password, String keystorePath, String mnemonic, Boolean isCurrent, Boolean isBackup) {
        this.coinId = coinId;
        this.name = name;
        this.password = password;
        this.keystorePath = keystorePath;
        this.mnemonic = mnemonic;
        this.isCurrent = isCurrent;
        this.isBackup = isBackup;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getETHWalletDao() : null;
    }

    public Long getCoinId() {
        return coinId;
    }

    public void setCoinId(Long coinId) {
        this.coinId = coinId;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    @NotNull
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(@NotNull String password) {
        this.password = password;
    }

    public String getKeystorePath() {
        return keystorePath;
    }

    public void setKeystorePath(String keystorePath) {
        this.keystorePath = keystorePath;
    }

    public String getMnemonic() {
        return mnemonic;
    }

    public void setMnemonic(String mnemonic) {
        this.mnemonic = mnemonic;
    }

    public Boolean getIsCurrent() {
        return isCurrent;
    }

    public void setIsCurrent(Boolean isCurrent) {
        this.isCurrent = isCurrent;
    }

    public Boolean getIsBackup() {
        return isBackup;
    }

    public void setIsBackup(Boolean isBackup) {
        this.isBackup = isBackup;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Coin> getCoins() {
        if (coins == null) {
            __throwIfDetached();
            CoinDao targetDao = daoSession.getCoinDao();
            List<Coin> coinsNew = targetDao._queryETHWallet_Coins(coinId);
            synchronized (this) {
                if(coins == null) {
                    coins = coinsNew;
                }
            }
        }
        return coins;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCoins() {
        coins = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
