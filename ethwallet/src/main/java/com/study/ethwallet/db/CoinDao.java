package com.study.ethwallet.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.study.ethwallet.entity.Coin;
import com.study.ethwallet.entity.ETHWallet;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COIN".
*/
public class CoinDao extends AbstractDao<Coin, Long> {

    public static final String TABLENAME = "COIN";

    /**
     * Properties of entity Coin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CoinId = new Property(0, Long.class, "coinId", true, "COIN_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SimpleName = new Property(2, String.class, "simpleName", false, "SIMPLE_NAME");
        public final static Property Symbol = new Property(3, String.class, "symbol", false, "SYMBOL");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property PrivateKey = new Property(5, String.class, "privateKey", false, "PRIVATE_KEY");
        public final static Property PublicKey = new Property(6, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property WalletId = new Property(7, Long.class, "walletId", false, "WALLET_ID");
    }

    private DaoSession daoSession;

    private Query<Coin> eTHWallet_CoinsQuery;

    public CoinDao(DaoConfig config) {
        super(config);
    }
    
    public CoinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COIN\" (" + //
                "\"COIN_ID\" INTEGER PRIMARY KEY ," + // 0: coinId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"SIMPLE_NAME\" TEXT," + // 2: simpleName
                "\"SYMBOL\" TEXT," + // 3: symbol
                "\"ADDRESS\" TEXT NOT NULL ," + // 4: address
                "\"PRIVATE_KEY\" TEXT," + // 5: privateKey
                "\"PUBLIC_KEY\" TEXT," + // 6: publicKey
                "\"WALLET_ID\" INTEGER);"); // 7: walletId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coin entity) {
        stmt.clearBindings();
 
        Long coinId = entity.getCoinId();
        if (coinId != null) {
            stmt.bindLong(1, coinId);
        }
        stmt.bindString(2, entity.getName());
 
        String simpleName = entity.getSimpleName();
        if (simpleName != null) {
            stmt.bindString(3, simpleName);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(4, symbol);
        }
        stmt.bindString(5, entity.getAddress());
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(6, privateKey);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(8, walletId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coin entity) {
        stmt.clearBindings();
 
        Long coinId = entity.getCoinId();
        if (coinId != null) {
            stmt.bindLong(1, coinId);
        }
        stmt.bindString(2, entity.getName());
 
        String simpleName = entity.getSimpleName();
        if (simpleName != null) {
            stmt.bindString(3, simpleName);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(4, symbol);
        }
        stmt.bindString(5, entity.getAddress());
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(6, privateKey);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(8, walletId);
        }
    }

    @Override
    protected final void attachEntity(Coin entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Coin readEntity(Cursor cursor, int offset) {
        Coin entity = new Coin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // coinId
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // simpleName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // symbol
            cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // privateKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publicKey
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // walletId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coin entity, int offset) {
        entity.setCoinId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSimpleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSymbol(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.getString(offset + 4));
        entity.setPrivateKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublicKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWalletId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coin entity, long rowId) {
        entity.setCoinId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coin entity) {
        if(entity != null) {
            return entity.getCoinId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coin entity) {
        return entity.getCoinId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "coins" to-many relationship of ETHWallet. */
    public List<Coin> _queryETHWallet_Coins(Long walletId) {
        synchronized (this) {
            if (eTHWallet_CoinsQuery == null) {
                QueryBuilder<Coin> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WalletId.eq(null));
                eTHWallet_CoinsQuery = queryBuilder.build();
            }
        }
        Query<Coin> query = eTHWallet_CoinsQuery.forCurrentThread();
        query.setParameter(0, walletId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getETHWalletDao().getAllColumns());
            builder.append(" FROM COIN T");
            builder.append(" LEFT JOIN ETHWallet T0 ON T.\"WALLET_ID\"=T0.\"COIN_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Coin loadCurrentDeep(Cursor cursor, boolean lock) {
        Coin entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ETHWallet eTHWallet = loadCurrentOther(daoSession.getETHWalletDao(), cursor, offset);
        entity.setETHWallet(eTHWallet);

        return entity;    
    }

    public Coin loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Coin> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Coin> list = new ArrayList<Coin>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Coin> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Coin> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
